#!/usr/bin/env python3
"""
Cleanup VR output files generated by MPI by removing the trailing '.0' suffix.

Usage:
    python clean_vr_outputs.py [--dir DIRECTORY] [--dry-run] [--verbose]

This script looks for files matching the patterns:
  - '*.vr.out.0'
  - '*.vr.err.0'
  - 'vr_batch_*.0'
and renames them to strip the final '.0'.
"""

import argparse
import logging
from pathlib import Path
from typing import Iterator

# ---------------------------------------------------------------------------- #
# Configuration & Patterns
# ---------------------------------------------------------------------------- #
# File glob patterns to match VR outputs with trailing '.0'
PATTERNS = [
    "*.vr.out.0",
    "*.vr.err.0",
    "vr_batch_*.0",
]


# ---------------------------------------------------------------------------- #
# Setup functions
# ---------------------------------------------------------------------------- #
def setup_logger(verbose: bool) -> None:
    """Configure logging format and level."""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format="[%(asctime)s] %(levelname)s: %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )


# ---------------------------------------------------------------------------- #
# Core functionality
# ---------------------------------------------------------------------------- #


def find_vr_files(directory: Path) -> Iterator[Path]:
    """Yield all files in `directory` matching VR output patterns."""
    for pattern in PATTERNS:
        for path in directory.glob(pattern):
            if path.is_file():
                yield path


def strip_suffix(path: Path) -> Path:
    """Return a new Path with the final '.0' suffix removed."""
    return path.with_suffix("")


def process_file(path: Path, dry_run: bool) -> None:
    """Rename `path` by stripping '.0'; log or perform action based on `dry_run`."""
    target = strip_suffix(path)

    if target.exists():
        logging.warning("Skipping %s: target %s already exists", path.name, target.name)
        return

    if dry_run:
        logging.info("Would rename: %s → %s", path.name, target.name)
    else:
        path.rename(target)
        logging.info("Renamed: %s → %s", path.name, target.name)


# ---------------------------------------------------------------------------- #
# Main entrypoint
# ---------------------------------------------------------------------------- #


def main(directory: Path, dry_run: bool, verbose: bool) -> None:
    """Process all matching VR output files in `directory`."""
    setup_logger(verbose)
    logging.info("Scanning directory: %s", directory)

    files = list(find_vr_files(directory))
    if not files:
        logging.info("No matching VR files found.")
        return

    for file_path in files:
        process_file(file_path, dry_run)


# ---------------------------------------------------------------------------- #
# CLI
# ---------------------------------------------------------------------------- #
if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Strip trailing '.0' from MPI-generated VR output filenames"
    )
    parser.add_argument(
        "--dir",
        "-d",
        type=Path,
        default=Path(".."),
        help="Directory to scan for VR output files",
    )
    parser.add_argument(
        "--dry-run", action="store_true", help="Show actions without renaming files"
    )
    parser.add_argument(
        "--verbose", action="store_true", help="Enable debug-level logging"
    )
    args = parser.parse_args()

    main(directory=args.dir, dry_run=args.dry_run, verbose=args.verbose)
